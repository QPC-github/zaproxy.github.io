<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ZAP Alert Details on OWASP ZAP</title>
    <link>/docs/alerts/</link>
    <description>Recent content in ZAP Alert Details on OWASP ZAP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Apr 2020 09:48:11 +0000</lastBuildDate>
    
	<atom:link href="/docs/alerts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>.env Information Leak</title>
      <link>/docs/alerts/40034/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40034/</guid>
      <description>Type: Active Scan Risk: Medium Description One or more .env files seems to have been located on the server. These files often expose infrastructure or administrative account credentials, API or APP keys, or other sensitive configuration information.
Solution Ensure the .env file is not accessible.
References  https://www.google.com/search?q=db_password+filetype%3Aenv https://mobile.twitter.com/svblxyz/status/1045013939904532482  CWE: 215 WASC: 13 Code  org/zaproxy/zap/extension/ascanrulesAlpha/EnvFileScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>.htaccess Information Leak</title>
      <link>/docs/alerts/40032/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40032/</guid>
      <description>Type: Active Scan Risk: Medium Description htaccess files can be used to alter the configuration of the Apache Web Server software to enable/disable additional functionality and features that the Apache Web Server software has to offer.
Solution Ensure the .htaccess file is not accessible.
References  http://www.htaccess-guide.com/  CWE: 215 WASC: 13 Code  org/zaproxy/zap/extension/ascanrulesBeta/HtAccessScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Absence of Anti-CSRF Tokens</title>
      <link>/docs/alerts/10202/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10202/</guid>
      <description>Type: Passive Scan Description A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user.</description>
    </item>
    
    <item>
      <title>Advanced SQL Injection</title>
      <link>/docs/alerts/90018/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/90018/</guid>
      <description>Type: Active Scan Risk: High Description A SQL injection may be possible using the attached payload
Solution Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by &amp;lsquo;?&amp;rsquo; If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.</description>
    </item>
    
    <item>
      <title>An example active scan rule which loads data from a file</title>
      <link>/docs/alerts/60101/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/60101/</guid>
      <description>Type: Active Scan Risk: High Description Add more information about the vulnerability here
Solution A general description of how to solve the problem
References  http://zaproxy.blogspot.co.uk/2014/04/hacking-zap-4-active-scan-rules.html  CWE: 0 WASC: 0 Code  org/zaproxy/zap/extension/ascanrulesAlpha/ExampleFileActiveScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>An example passive scan rule which loads data from a file</title>
      <link>/docs/alerts/60001/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/60001/</guid>
      <description>Type: Passive Scan Description Add more information about the vulnerability here
Solution A general description of how to solve the problem
References  http://zaproxy.blogspot.co.uk/2014/04/hacking-zap-3-passive-scan-rules.html  Code  org/zaproxy/zap/extension/pscanrulesAlpha/ExampleFilePassiveScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Anti CSRF Tokens Scanner</title>
      <link>/docs/alerts/20012/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/20012/</guid>
      <description>Type: Active Scan Risk: High Description A cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user.</description>
    </item>
    
    <item>
      <title>Apache Range Header DoS (CVE-2011-3192)</title>
      <link>/docs/alerts/10053/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10053/</guid>
      <description>Type: Active Scan Risk: Medium Description The byterange filter in earlier versions of the Apache HTTP Server allows remote attackers to cause a denial of service (memory and CPU exhaustion) via a Range request header that identifies multiple overlapping ranges. This issue was exploited in the wild in August 2011.
Solution Upgrade your Apache server to a currently stable version. Alternative solutions or workarounds are outlined in the references.
References  https://httpd.</description>
    </item>
    
    <item>
      <title>Application Error Disclosure</title>
      <link>/docs/alerts/90022/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/90022/</guid>
      <description>Type: Passive Scan Description This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.
Solution Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.</description>
    </item>
    
    <item>
      <title>Backup File Disclosure</title>
      <link>/docs/alerts/10095/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10095/</guid>
      <description>Type: Active Scan Risk: Medium Description A backup of the file was disclosed by the web server
Solution Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files.
Consider using MVC based frameworks such as Struts.
References  https://cwe.mitre.org/data/definitions/530.html https://wiki.owasp.org/index.php/Review_Old,_Backup_and_Unreferenced_Files_for_Sensitive_Information_(OTG-CONFIG-004)  CWE: 530 WASC: 34 Code  org/zaproxy/zap/extension/ascanrulesBeta/BackupFileDisclosure.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Base64 Disclosure</title>
      <link>/docs/alerts/10094/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10094/</guid>
      <description>Type: Passive Scan Description Base64 encoded data was disclosed by the application/web server
Solution Manually confirm that the Base64 data does not leak sensitive information, and that the data cannot be aggregated/used to exploit other vulnerabilities.
References  https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure http://projects.webappsec.org/w/page/13246936/Information%20Leakage  Code  org/zaproxy/zap/extension/pscanrulesAlpha/Base64Disclosure.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Big Redirect Detected (Potential Sensitive Information Leak)</title>
      <link>/docs/alerts/10044/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10044/</guid>
      <description>Type: Passive Scan Description The server has responded with a redirect that seems to provide a large response. This may indicate that although the server sent a redirect it also responded with body content (which may include sensitive details, PII, etc.).
Solution Ensure that no sensitive information is leaked via redirect responses. Redirect responses should have almost no content.
Code  org/zaproxy/zap/extension/pscanrulesBeta/BigRedirectsScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Buffer Overflow</title>
      <link>/docs/alerts/30001/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/30001/</guid>
      <description>Type: Active Scan Risk: Medium Description Buffer overflow errors are characterized by the overwriting of memory spaces of the background web process, which should have never been modified intentionally or unintentionally. Overwriting values of the IP (Instruction Pointer), BP (Base Pointer) and other registers causes exceptions, segmentation faults, and other process errors to occur. Usually these errors end execution of the application in an unexpected way.
Solution Rewrite the background program using proper return length checking.</description>
    </item>
    
    <item>
      <title>Charset Mismatch</title>
      <link>/docs/alerts/90011/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/90011/</guid>
      <description>Type: Passive Scan Description This check identifies responses where the HTTP Content-Type header declares a charset different from the charset defined by the body of the HTML or XML. When there&#39;s a charset mismatch between the HTTP header and content body Web browsers can be forced into an undesirable content-sniffing mode to determine the content&#39;s correct character set.
An attacker could manipulate content on the page to be interpreted in an encoding of their choice.</description>
    </item>
    
    <item>
      <title>Cloud Metadata Potentially Exposed</title>
      <link>/docs/alerts/90034/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/90034/</guid>
      <description>Type: Active Scan Risk: High Description The Cloud Metadata Attack attempts to abuse a misconfigured NGINX server in order to access the instance metadata maintained by cloud service providers such as AWS, GCP and Azure. All of these providers provide metadata via an internal unroutable IP address &amp;lsquo;169.254.169.254&amp;rsquo; - this can be exposed by incorrectly configured NGINX servers and accessed by using this IP address in the Host header field.</description>
    </item>
    
    <item>
      <title>Content Cacheability</title>
      <link>/docs/alerts/10049/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10049/</guid>
      <description>Type: Passive Scan Description Unavailable
Solution Unavailable
Code  org/zaproxy/zap/extension/pscanrulesAlpha/CacheableScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Content Security Policy (CSP) Header Not Set</title>
      <link>/docs/alerts/10038/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10038/</guid>
      <description>Type: Passive Scan Description Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.</description>
    </item>
    
    <item>
      <title>Content-Type Header Missing</title>
      <link>/docs/alerts/10019/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10019/</guid>
      <description>Type: Passive Scan Description The Content-Type header was either missing or empty.
Solution Ensure each page is setting the specific and appropriate content-type value for the content being delivered.
References  http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx  Code  org/zaproxy/zap/extension/pscanrules/ContentTypeMissingScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Cookie No HttpOnly Flag</title>
      <link>/docs/alerts/10010/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10010/</guid>
      <description>Type: Passive Scan Description A cookie has been set without the HttpOnly flag, which means that the cookie can be accessed by JavaScript. If a malicious script can be run on this page then the cookie will be accessible and can be transmitted to another site. If this is a session cookie then session hijacking may be possible.
Solution Ensure that the HttpOnly flag is set for all cookies.
References  http://www.</description>
    </item>
    
    <item>
      <title>Cookie Poisoning</title>
      <link>/docs/alerts/10029/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10029/</guid>
      <description>Type: Passive Scan Description This check looks at user-supplied input in query string parameters and POST data to identify where cookie parameters might be controlled. This is called a cookie poisoning attack, and becomes exploitable when an attacker can manipulate the cookie in various ways. In some cases this will not be exploitable, however, allowing URL parameters to set cookie values is generally considered a bug.
Solution Do not allow user input to control cookie names and values.</description>
    </item>
    
    <item>
      <title>Cookie Slack Detector</title>
      <link>/docs/alerts/90027/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/90027/</guid>
      <description>Type: Active Scan Risk: Informational Description Repeated GET requests: drop a different cookie each time, followed by normal request with all cookies to stabilize session, compare responses against original baseline GET. This can reveal areas where cookie based authentication/attributes are not actually enforced.
Solution References  http://projects.webappsec.org/Fingerprinting   CWE: 200 WASC: 45 Code  org/zaproxy/zap/extension/ascanrulesBeta/SlackerCookieDetector.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Cookie Without SameSite Attribute</title>
      <link>/docs/alerts/10054/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10054/</guid>
      <description>Type: Passive Scan Description A cookie has been set without the SameSite attribute, which means that the cookie can be sent as a result of a &amp;lsquo;cross-site&amp;rsquo; request. The SameSite attribute is an effective counter measure to cross-site request forgery, cross-site script inclusion, and timing attacks.
Solution Ensure that the SameSite attribute is set to either &amp;lsquo;lax&amp;rsquo; or ideally &amp;lsquo;strict&amp;rsquo; for all cookies.
References  https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site  Code  org/zaproxy/zap/extension/pscanrules/CookieSameSiteScanner.java  Last updated: 2020-04-30 09:48:11.</description>
    </item>
    
    <item>
      <title>Cookie Without Secure Flag</title>
      <link>/docs/alerts/10011/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10011/</guid>
      <description>Type: Passive Scan Description A cookie has been set without the secure flag, which means that the cookie can be accessed via unencrypted connections.
Solution Whenever a cookie contains sensitive information or is a session token, then it should always be passed using an encrypted channel. Ensure that the secure flag is set for cookies containing such sensitive information.
References  http://www.owasp.org/index.php/Testing_for_cookies_attributes_(OWASP-SM-002)  Code  org/zaproxy/zap/extension/pscanrules/CookieSecureFlagScanner.java  Last updated: 2020-04-30 09:48:11.</description>
    </item>
    
    <item>
      <title>CRLF Injection</title>
      <link>/docs/alerts/40003/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40003/</guid>
      <description>Type: Active Scan Risk: Medium Description Cookie can be set via CRLF injection. It may also be possible to set arbitrary HTTP response headers. In addition, by carefully crafting the injected response using cross-site script, cache poisoning vulnerability may also exist.
Solution Type check the submitted parameter carefully. Do not allow CRLF to be injected by filtering CRLF.
References  http://www.watchfire.com/resources/HTTPResponseSplitting.pdf http://webappfirewall.com/lib/crlf-injection.txtnull http://www.securityfocus.com/bid/9804  CWE: 113 WASC: 25 Code  org/zaproxy/zap/extension/ascanrules/TestInjectionCRLF.</description>
    </item>
    
    <item>
      <title>Cross Site Scripting (DOM Based)</title>
      <link>/docs/alerts/40026/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40026/</guid>
      <description>Type: Active Scan Risk: High Description Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user&#39;s browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.</description>
    </item>
    
    <item>
      <title>Cross Site Scripting (Persistent)</title>
      <link>/docs/alerts/40014/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40014/</guid>
      <description>Type: Active Scan Risk: High Description Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user&#39;s browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.</description>
    </item>
    
    <item>
      <title>Cross Site Scripting (Persistent) - Prime</title>
      <link>/docs/alerts/40016/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40016/</guid>
      <description>Type: Active Scan Risk: Informational Description N/A
Solution N/A
References  N/A  CWE: 79 WASC: 8 Code  org/zaproxy/zap/extension/ascanrules/TestPersistentXSSPrime.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Cross Site Scripting (Persistent) - Spider</title>
      <link>/docs/alerts/40017/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40017/</guid>
      <description>Type: Active Scan Risk: Informational Description N/A
Solution N/A
References  N/A  CWE: 79 WASC: 8 Code  org/zaproxy/zap/extension/ascanrules/TestPersistentXSSSpider.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Cross Site Scripting (Reflected)</title>
      <link>/docs/alerts/40012/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40012/</guid>
      <description>Type: Active Scan Risk: High Description Cross-site Scripting (XSS) is an attack technique that involves echoing attacker-supplied code into a user&#39;s browser instance. A browser instance can be a standard web browser client, or a browser object embedded in a software product such as the browser within WinAmp, an RSS reader, or an email client. The code itself is usually written in HTML/JavaScript, but may also extend to VBScript, ActiveX, Java, Flash, or any other browser-supported technology.</description>
    </item>
    
    <item>
      <title>Cross-Domain JavaScript Source File Inclusion</title>
      <link>/docs/alerts/10017/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10017/</guid>
      <description>Type: Passive Scan Description The page includes one or more script files from a third-party domain.
Solution Ensure JavaScript source files are loaded from only trusted sources, and the sources can&#39;t be controlled by end users of the application.
Code  org/zaproxy/zap/extension/pscanrules/CrossDomainScriptInclusionScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Cross-Domain Misconfiguration</title>
      <link>/docs/alerts/10098/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10098/</guid>
      <description>Type: Passive Scan Description Web browser data loading may be possible, due to a Cross Origin Resource Sharing (CORS) misconfiguration on the web server
Solution Ensure that sensitive data is not available in an unauthenticated manner (using IP address white-listing, for instance). Configure the &amp;ldquo;Access-Control-Allow-Origin&amp;rdquo; HTTP header to a more restrictive set of domains, or remove all CORS headers entirely, to allow the web browser to enforce the Same Origin Policy (SOP) in a more restrictive manner.</description>
    </item>
    
    <item>
      <title>Cross-Domain Misconfiguration</title>
      <link>/docs/alerts/20016/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/20016/</guid>
      <description>Type: Active Scan Risk: High Description Solution References  http://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html http://www.adobe.com/devnet-docs/acrobatetk/tools/AppSec/CrossDomain_PolicyFile_Specification.pdf http://msdn.microsoft.com/en-US/library/cc197955%28v=vs.95%29.aspx http://msdn.microsoft.com/en-us/library/cc838250%28v=vs.95%29.aspx  CWE: 264 WASC: 14 Code  org/zaproxy/zap/extension/ascanrulesBeta/CrossDomainScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>CSP Scanner</title>
      <link>/docs/alerts/10055/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10055/</guid>
      <description>Type: Passive Scan Description Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page — covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.</description>
    </item>
    
    <item>
      <title>Directory Browsing</title>
      <link>/docs/alerts/0/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/0/</guid>
      <description>Type: Active Scan Risk: Medium Description It is possible to view the directory listing. Directory listing may reveal hidden scripts, include files, backup source files, etc. which can be accessed to read sensitive information.
Solution Disable directory browsing. If this is required, make sure the listed files does not induce risks.
References  http://httpd.apache.org/docs/mod/core.html#options http://alamo.satlug.org/pipermail/satlug/2002-February/000053.html   CWE: 548 WASC: 48 Code  org/zaproxy/zap/extension/ascanrules/TestDirectoryBrowsing.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Directory Browsing</title>
      <link>/docs/alerts/10033/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10033/</guid>
      <description>Type: Passive Scan Description It is possible to view a listing of the directory contents. Directory listings may reveal hidden scripts, include files , backup source files, etc., which be accessed to reveal sensitive information.
Solution Configure the web server to disable directory browsing.
References  https://cwe.mitre.org/data/definitions/548.html  Code  org/zaproxy/zap/extension/pscanrulesBeta/DirectoryBrowsingScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>ELMAH Information Leak</title>
      <link>/docs/alerts/40028/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40028/</guid>
      <description>Type: Active Scan Risk: Medium Description The Error Logging Modules and Handlers (ELMAH [elmah.axd]) HTTP Module was found to be available. This module can leak a significant amount of valuable information.
Solution Consider whether or not ELMAH is actually required in production, if it isn&#39;t then disable it. If it is then ensure access to it requires authentication and authorization. See also: https://elmah.github.io/a/securing-error-log-pages/
References  https://www.troyhunt.com/aspnet-session-hijacking-with-google/ https://www.nuget.org/packages/elmah https://elmah.github.io/  CWE: 215 WASC: 13 Code  org/zaproxy/zap/extension/ascanrulesBeta/ElmahScanner.</description>
    </item>
    
    <item>
      <title>Example Active Scanner: Denial of Service</title>
      <link>/docs/alerts/60100/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/60100/</guid>
      <description>Type: Active Scan Risk: High Description Denial of Service (DoS) is an attack technique with the intent of preventing a web site from serving normal user activity. DoS attacks, which are easily normally applied to the network layer, are also possible at the application layer. These malicious attacks can succeed by starving a system of critical resources, vulnerability exploit, or abuse of functionality.
Many times DoS attacks will attempt to consume all of a web site&#39;s available system resources such as: CPU, memory, disk space etc.</description>
    </item>
    
    <item>
      <title>Example Passive Scanner: Denial of Service</title>
      <link>/docs/alerts/60000/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/60000/</guid>
      <description>Type: Passive Scan Description Denial of Service (DoS) is an attack technique with the intent of preventing a web site from serving normal user activity. DoS attacks, which are easily normally applied to the network layer, are also possible at the application layer. These malicious attacks can succeed by starving a system of critical resources, vulnerability exploit, or abuse of functionality.
Many times DoS attacks will attempt to consume all of a web site&#39;s available system resources such as: CPU, memory, disk space etc.</description>
    </item>
    
    <item>
      <title>Expression Language Injection</title>
      <link>/docs/alerts/90025/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/90025/</guid>
      <description>Type: Active Scan Risk: High Description The software constructs all or part of an expression language (EL) statement in a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed. In certain versions of Spring 3.0.5 and earlier, there was a vulnerability (CVE-2011-2730) in which Expression Language tags would be evaluated twice, which effectively exposed any application to EL injection.</description>
    </item>
    
    <item>
      <title>External Redirect</title>
      <link>/docs/alerts/20019/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/20019/</guid>
      <description>Type: Active Scan Risk: High Description URL redirectors represent common functionality employed by web sites to forward an incoming request to an alternate resource. This can be done for a variety of reasons and is often done to allow resources to be moved within the directory structure and to avoid breaking functionality for users that request the resource at its previous location. URL redirectors may also be used to implement load balancing, leveraging abbreviated URLs or recording outgoing links.</description>
    </item>
    
    <item>
      <title>Feature Policy Header Not Set</title>
      <link>/docs/alerts/10063/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10063/</guid>
      <description>Type: Passive Scan Description Feature Policy Header is an added layer of security that helps to restrict from unauthorized access or usage of browser/client features by web resources. This policy ensures the user privacy by limiting or specifying the features of the browsers can be used by the web resources. Feature Policy provides a set of standard HTTP headers that allow website owners to limit which features of browsers can be used by the page such as camera, microphone, location, full screen etc.</description>
    </item>
    
    <item>
      <title>Format String Error</title>
      <link>/docs/alerts/30002/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/30002/</guid>
      <description>Type: Active Scan Risk: Medium Description A Format String error occurs when the submitted data of an input string is evaluated as a command by the application.
Solution Rewrite the background program using proper deletion of bad character strings. This will require a recompile of the background executable.
References  https://www.owasp.org/index.php/Format_string_attack  CWE: 134 WASC: 6 Code  org/zaproxy/zap/extension/ascanrules/FormatString.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Generic Padding Oracle</title>
      <link>/docs/alerts/90024/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/90024/</guid>
      <description>Type: Active Scan Risk: High Description By manipulating the padding on an encrypted string, an attacker is able to generate an error message that indicates a likely &amp;lsquo;padding oracle&amp;rsquo; vulnerability. Such a vulnerability can affect any application or framework that uses encryption improperly, such as some versions of ASP.net, Java Server Faces, and Mono. An attacker may exploit this issue to decrypt data and recover encryption keys, potentially viewing and modifying confidential data.</description>
    </item>
    
    <item>
      <title>GET for POST</title>
      <link>/docs/alerts/10058/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10058/</guid>
      <description>Type: Active Scan Risk: Informational Description A request that was originally observed as a POST was also accepted as a GET. This issue does not represent a security weakness unto itself, however, it may facilitate simplification of other attacks. For example if the original POST is subject to Cross-Site Scripting (XSS), then this finding may indicate that a simplified (GET based) XSS may also be possible.
Solution Ensure that only POST is accepted where POST is expected.</description>
    </item>
    
    <item>
      <title>Hash Disclosure</title>
      <link>/docs/alerts/10097/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10097/</guid>
      <description>Type: Passive Scan Description A hash was disclosed by the web server
Solution Ensure that hashes that are used to protect credentials or other resources are not leaked by the web server or database. There is typically no requirement for password hashes to be accessible to the web browser.
References  https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure http://projects.webappsec.org/w/page/13246936/Information%20Leakage http://openwall.info/wiki/john/sample-hashes  Code  org/zaproxy/zap/extension/pscanrulesBeta/HashDisclosureScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Heartbleed OpenSSL Vulnerability</title>
      <link>/docs/alerts/20015/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/20015/</guid>
      <description>Type: Active Scan Risk: High Description The TLS implementation in OpenSSL 1.0.1 before 1.0.1g does not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, potentially disclosing sensitive information.
Solution Update to OpenSSL 1.0.1g or later. Re-issue HTTPS certificates. Change asymmetric private keys and shared secret keys, since these may have been compromised, with no evidence of compromise in the server log files.</description>
    </item>
    
    <item>
      <title>Heartbleed OpenSSL Vulnerability (Indicative)</title>
      <link>/docs/alerts/10034/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10034/</guid>
      <description>Type: Passive Scan Description The TLS and DTLS implementations in OpenSSL 1.0.1 before 1.0.1g do not properly handle Heartbeat Extension packets, which allows remote attackers to obtain sensitive information from process memory via crafted packets that trigger a buffer over-read, potentially disclosing sensitive information.
Solution Update to OpenSSL 1.0.1g or later. Re-issue HTTPS certificates. Change asymmetric private keys and shared secret keys, since these may have been compromised, with no evidence of compromise in the server log files.</description>
    </item>
    
    <item>
      <title>Hidden File Finder</title>
      <link>/docs/alerts/40035/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40035/</guid>
      <description>Type: Active Scan Risk: Medium Description A sensitive file was identified as accessible or available. This may leak administrative, configuration, or credential information which can be leveraged by a malicious individual to further attack the system or conduct social engineering efforts.
Solution Consider whether or not the component is actually required in production, if it isn&#39;t then disable it. If it is then ensure access to it requires appropriate authentication and authorization, or limit exposure to internal systems or specific source IPs, etc.</description>
    </item>
    
    <item>
      <title>HTTP Only Site</title>
      <link>/docs/alerts/10106/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10106/</guid>
      <description>Type: Active Scan Risk: Medium Description The site is only served under HTTP and not HTTPS.
Solution Configure your web or application server to use SSL (https).
References  https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet https://www.owasp.org/index.php/SSL_Best_Practices https://letsencrypt.org/  CWE: 311 WASC: 4 Code  org/zaproxy/zap/extension/ascanrulesBeta/HttpOnlySite.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>HTTP Parameter Override</title>
      <link>/docs/alerts/10026/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10026/</guid>
      <description>Type: Passive Scan Description Unspecified form action: HTTP parameter override attack potentially possible. This is a known problem with Java Servlets but other platforms may also be vulnerable.
Solution All forms must specify the action URL.
References  http://download.oracle.com/javaee-archive/servlet-spec.java.net/jsr340-experts/att-0317/OnParameterPollutionAttacks.pdf  Code  org/zaproxy/zap/extension/pscanrulesBeta/ServletParameterPollutionScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>HTTP Parameter Pollution scanner</title>
      <link>/docs/alerts/20014/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/20014/</guid>
      <description>Type: Active Scan Risk: Informational Description HTTP Parameter Pollution (HPP) attacks consist of injecting encoded query string delimiters into other existing parameters. If a web application does not properly sanitize the user input, a malicious user can compromise the logic of the application to perform either client-side or server-side attacks. One consequence of HPP attacks is that the attacker can potentially override existing hard-coded HTTP parameters to modify the behavior of an application, bypass input validation checkpoints, and access and possibly exploit variables that may be out of direct reach.</description>
    </item>
    
    <item>
      <title>HTTP Server Response Header Scanner</title>
      <link>/docs/alerts/10036/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10036/</guid>
      <description>Type: Passive Scan Description Unavailable
Solution Unavailable
Code  org/zaproxy/zap/extension/pscanrulesBeta/ServerHeaderInfoLeakScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>HTTP to HTTPS Insecure Transition in Form Post</title>
      <link>/docs/alerts/10041/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10041/</guid>
      <description>Type: Passive Scan Description This check looks for insecure HTTP pages that host HTTPS forms. The issue is that an insecure HTTP page can easily be hijacked through MITM and the secure HTTPS form can be replaced or spoofed.
Solution Use HTTPS for landing pages that host secure forms.
Code  org/zaproxy/zap/extension/pscanrulesBeta/InsecureFormLoadScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Httpoxy - Proxy Header Misuse</title>
      <link>/docs/alerts/10107/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10107/</guid>
      <description>Type: Active Scan Risk: High Description The server initiated a proxied request via the proxy specified in the HTTP Proxy header of the request.Httpoxy typically affects code running in CGI or CGI like environments. This may allow attackers to:
 Proxy the outgoing HTTP requests made by the web application Direct the server to open outgoing connections to an address and port of their choosing or Tie up server resources by forcing the vulnerable software to use a malicious proxy  Solution The best immediate mitigation is to block Proxy request headers as early as possible, and before they hit your application.</description>
    </item>
    
    <item>
      <title>HTTPS Content Available via HTTP</title>
      <link>/docs/alerts/10047/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10047/</guid>
      <description>Type: Active Scan Risk: Low Description Content which was initially accessed via HTTPS (i.e.: using SSL/TLS encryption) is also accessible via HTTP (without encryption).
Solution Ensure that your web server, application server, load balancer, etc. is configured to only serve such content via HTTPS. Consider implementing HTTP Strict Transport Security.
References  https://www.owasp.org/index.php/HTTP_Strict_Transport_Security https://www.owasp.org/index.php/List_of_useful_HTTP_headers http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security http://caniuse.com/stricttransportsecurity http://tools.ietf.org/html/rfc6797  CWE: 311 WASC: 4 Code  org/zaproxy/zap/extension/ascanrulesBeta/HttpsAsHttpScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>HTTPS to HTTP Insecure Transition in Form Post</title>
      <link>/docs/alerts/10042/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10042/</guid>
      <description>Type: Passive Scan Description This check identifies secure HTTPS pages that host insecure HTTP forms. The issue is that a secure page is transitioning to an insecure page when data is uploaded through a form. The user may think they&#39;re submitting data to a secure page when in fact they are not.
Solution Ensure sensitive data is only sent over secured HTTPS channels.
Code  org/zaproxy/zap/extension/pscanrulesBeta/InsecureFormPostScanner.java  Last updated: 2020-04-30 09:48:11.</description>
    </item>
    
    <item>
      <title>Image Location and Privacy Scanner</title>
      <link>/docs/alerts/10103/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10103/</guid>
      <description>Type: Passive Scan Description The image was found to contain embedded location information, such as GPS coordinates, or another privacy exposure, such as camera serial number. Depending on the context of the image in the website, this information may expose private details of the users of a site. For example, a site that allows users to upload profile pictures taken in the home may expose the home&#39;s address.
Solution Before allowing images to be stored on the server and/or transmitted to the browser, strip out the embedded location information from image.</description>
    </item>
    
    <item>
      <title>In Page Banner Information Leak</title>
      <link>/docs/alerts/10009/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10009/</guid>
      <description>Type: Passive Scan Description The server returned a version banner string in the response content. Such information leaks may allow attackers to further target specific issues impacting the product and version in use.
Solution Configure the server to prevent such information leaks. For example: Under Tomcat this is done via the &amp;ldquo;server&amp;rdquo; directive and implementation of custom error pages. Under Apache this is done via the &amp;ldquo;ServerSignature&amp;rdquo; and &amp;ldquo;ServerTokens&amp;rdquo; directives.</description>
    </item>
    
    <item>
      <title>Incomplete or No Cache-control and Pragma HTTP Header Set</title>
      <link>/docs/alerts/10015/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10015/</guid>
      <description>Type: Passive Scan Description The cache-control and pragma HTTP header have not been set properly or are missing allowing the browser and proxies to cache content.
Solution Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate; and that the pragma HTTP header is set with no-cache.
References  https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching  Code  org/zaproxy/zap/extension/pscanrules/CacheControlScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Information Disclosure - Debug Error Messages</title>
      <link>/docs/alerts/10023/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10023/</guid>
      <description>Type: Passive Scan Description The response appeared to contain common error messages returned by platforms such as ASP.NET, and Web-servers such as IIS and Apache. You can configure the list of common debug messages.
Solution Disable debugging messages before pushing to production.
Code  org/zaproxy/zap/extension/pscanrules/InformationDisclosureDebugErrors.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Information Disclosure - Sensitive Information in HTTP Referrer Header</title>
      <link>/docs/alerts/10025/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10025/</guid>
      <description>Type: Passive Scan Description The HTTP header may have leaked a potentially sensitive parameter to another domain. This can violate PCI and most organizational compliance policies. You can configure the list of strings for this check to add or remove values specific to your environment.
Solution Do not pass sensitive information in URIs.
Code  org/zaproxy/zap/extension/pscanrules/InformationDisclosureReferrerScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Information Disclosure - Sensitive Information in URL</title>
      <link>/docs/alerts/10024/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10024/</guid>
      <description>Type: Passive Scan Description The request appeared to contain sensitive information leaked in the URL. This can violate PCI and most organizational compliance policies. You can configure the list of strings for this check to add or remove values specific to your environment.
Solution Do not pass sensitive information in URIs.
Code  org/zaproxy/zap/extension/pscanrules/InformationDisclosureInURL.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Information Disclosure - Suspicious Comments</title>
      <link>/docs/alerts/10027/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10027/</guid>
      <description>Type: Passive Scan Description The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.
Solution Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.
Code  org/zaproxy/zap/extension/pscanrules/InformationDisclosureSuspiciousComments.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Insecure Component</title>
      <link>/docs/alerts/10046/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10046/</guid>
      <description>Type: Passive Scan Description Based on passive analysis of the response, insecure component {0} {1} appears to be in use. The highest noted CVSS rating for this product version is {2}. In total, {3} vulnerabilities were noted. Some Linux distributions such as Red Hat employ the practice of retaining old version numbers when security fixes are &amp;ldquo;backported&amp;rdquo;. These cases are noted as &amp;ldquo;False Positives&amp;rdquo;, but should be manually verified.
Solution Upgrade from {0} {1} to the latest stable version of the product.</description>
    </item>
    
    <item>
      <title>Insecure HTTP Method</title>
      <link>/docs/alerts/90028/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/90028/</guid>
      <description>Type: Active Scan Risk: Medium Description The most common methodology for attackers is to first footprint the target&#39;s web presence and enumerate as much information as possible. With this information, the attacker may develop an accurate attack scenario, which will effectively exploit a vulnerability in the software type/version being utilized by the target host.
Multi-tier fingerprinting is similar to its predecessor, TCP/IP Fingerprinting (with a scanner such as Nmap) except that it is focused on the Application Layer of the OSI model instead of the Transport Layer.</description>
    </item>
    
    <item>
      <title>Insecure JSF ViewState</title>
      <link>/docs/alerts/90001/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/90001/</guid>
      <description>Type: Passive Scan Description The response at the following URL contains a ViewState value that has no cryptographic protections.
Solution Secure VIEWSTATE with a MAC specific to your environment
References  https://www.trustwave.com/spiderlabs/advisories/TWSL2010-001.txt  Code  org/zaproxy/zap/extension/pscanrules/InsecureJSFViewStatePassiveScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Integer Overflow Error</title>
      <link>/docs/alerts/30003/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/30003/</guid>
      <description>Type: Active Scan Risk: Medium Description An integer overflow condition exists when an integer, which has not been properly checked from the input stream is used within a compiled program.
Solution Rewrite the background program using proper checking of the size of integer being input to prevent overflows and divide by 0 errors. This will require a recompile of the background executable.
References  https://www.owasp.org/index.php/Integer_overflow and http://projects.webappsec.org/w/page/13246946/Integer%20Overflows.  CWE: 190 WASC: 3 Code  org/zaproxy/zap/extension/ascanrulesBeta/IntegerOverflow.</description>
    </item>
    
    <item>
      <title>Java Serialization Object</title>
      <link>/docs/alerts/90002/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/90002/</guid>
      <description>Type: Passive Scan Description Java Serialization seems to be in use. If not correctly validated, an attacker can send a specially crafted object. This can lead to a dangerous &amp;ldquo;Remote Code Execution&amp;rdquo;. A magic sequence identifying JSO has been detected (Base64: rO0AB, Raw: 0xac, 0xed, 0x00, 0x05).
Solution Deserialization of untrusted data is inherently dangerous and should be avoided.
References  https://www.oracle.com/technetwork/java/seccodeguide-139067.html#8  Code  org/zaproxy/zap/extension/pscanrulesAlpha/JsoScanner.java  Last updated: 2020-04-30 09:48:11.</description>
    </item>
    
    <item>
      <title>LDAP Injection</title>
      <link>/docs/alerts/40015/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40015/</guid>
      <description>Type: Active Scan Risk: High Description LDAP Injection may be possible. It may be possible for an attacker to bypass authentication controls, and to view and modify arbitrary data in the LDAP directory.
Solution Validate and/or escape all user input before using it to create an LDAP query. In particular, the following characters (or combinations) should be blacklisted: &amp;amp; | ! &amp;lt;
  = ~=
 = &amp;lt;=
    ( ) , + &amp;quot; &#39; ; / NUL character</description>
    </item>
    
    <item>
      <title>Loosely Scoped Cookie</title>
      <link>/docs/alerts/90033/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/90033/</guid>
      <description>Type: Passive Scan Description Cookies can be scoped by domain or path. This check is only concerned with domain scope.The domain scope applied to a cookie determines which domains can access it. For example, a cookie can be scoped strictly to a subdomain e.g. www.nottrusted.com, or loosely scoped to a parent domain e.g. nottrusted.com. In the latter case, any subdomain of nottrusted.com can access the cookie. Loosely scoped cookies are common in mega-applications like google.</description>
    </item>
    
    <item>
      <title>Modern Web Application</title>
      <link>/docs/alerts/10109/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10109/</guid>
      <description>Type: Passive Scan Description The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.
Solution This is an informational alert and so no changes are required.
Code  org/zaproxy/zap/extension/pscanrulesAlpha/ModernAppDetectionScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Open Redirect</title>
      <link>/docs/alerts/10028/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10028/</guid>
      <description>Type: Passive Scan Description Open redirects are one of the OWASP 2010 Top Ten vulnerabilities. This check looks at user-supplied input in query string parameters and POST data to identify where open redirects might be possible. Open redirects occur when an application allows user-supplied input (e.g. http://nottrusted.com) to control an offsite redirect. This is generally a pretty accurate way to find where 301 or 302 redirects could be exploited by spammers or phishing attacks.</description>
    </item>
    
    <item>
      <title>Parameter Tampering</title>
      <link>/docs/alerts/40008/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40008/</guid>
      <description>Type: Active Scan Risk: Medium Description Parameter manipulation caused an error page or Java stack trace to be displayed. This indicated lack of exception handling and potential areas for further exploit.
Solution Identify the cause of the error and fix it. Do not trust client side input and enforce a tight check in the server side. Besides, catch the exception properly. Use a generic 500 error page for internal server error.</description>
    </item>
    
    <item>
      <title>Path Traversal</title>
      <link>/docs/alerts/6/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/6/</guid>
      <description>Type: Active Scan Risk: High Description The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.</description>
    </item>
    
    <item>
      <title>PII Disclosure</title>
      <link>/docs/alerts/10062/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10062/</guid>
      <description>Type: Passive Scan Description The response contains Personally Identifiable Information, such as CC number, SSN and similar sensitive data.
Solution Unavailable
Code  org/zaproxy/zap/extension/pscanrulesBeta/PiiScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Possible Username Enumeration</title>
      <link>/docs/alerts/40023/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40023/</guid>
      <description>Type: Active Scan Risk: Informational Description It may be possible to enumerate usernames, based on differing HTTP responses when valid and invalid usernames are provided. This would greatly increase the probability of success of password brute-forcing attacks against the system. Note that false positives may sometimes be minimised by increasing the &amp;lsquo;Attack Strength&amp;rsquo; Option in ZAP. Please manually check the &amp;lsquo;Other Info&amp;rsquo; field to confirm if this is actually an issue.</description>
    </item>
    
    <item>
      <title>Private IP Disclosure</title>
      <link>/docs/alerts/2/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/2/</guid>
      <description>Type: Passive Scan Description A private IP (such as 10.x.x.x, 172.x.x.x, 192.168.x.x) or an Amazon EC2 private hostname (for example, ip-10-0-56-78) has been found in the HTTP response body. This information might be helpful for further attacks targeting internal systems.
Solution Remove the private IP address from the HTTP response body. For comments, use JSP/ASP/PHP comment instead of HTML/JavaScript comment which can be seen by client browsers.
References  https://tools.ietf.org/html/rfc1918  Code  org/zaproxy/zap/extension/pscanrules/TestInfoPrivateAddressDisclosure.</description>
    </item>
    
    <item>
      <title>Proxy Disclosure</title>
      <link>/docs/alerts/40025/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40025/</guid>
      <description>Type: Active Scan Risk: Medium Description null
Solution Disable the &amp;lsquo;TRACE&amp;rsquo; method on the proxy servers, as well as the origin web/application server. Disable the &amp;lsquo;OPTIONS&amp;rsquo; method on the proxy servers, as well as the origin web/application server, if it is not required for other purposes, such as &amp;lsquo;CORS&amp;rsquo; (Cross Origin Resource Sharing). Configure the web and application servers with custom error pages, to prevent &amp;lsquo;fingerprintable&amp;rsquo; product-specific error pages being leaked to the user in the event of HTTP errors, such as &amp;lsquo;TRACK&amp;rsquo; requests for non-existent pages.</description>
    </item>
    
    <item>
      <title>Relative Path Confusion</title>
      <link>/docs/alerts/10051/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10051/</guid>
      <description>Type: Active Scan Risk: Medium Description The web server is configured to serve responses to ambiguous URLs in a manner that is likely to lead to confusion about the correct &amp;ldquo;relative path&amp;rdquo; for the URL. Resources (CSS, images, etc.) are also specified in the page response using relative, rather than absolute URLs. In an attack, if the web browser parses the &amp;ldquo;cross-content&amp;rdquo; response in a permissive manner, or can be tricked into permissively parsing the &amp;ldquo;cross-content&amp;rdquo; response, using techniques such as framing, then the web browser may be fooled into interpreting HTML as CSS (or other content types), leading to an XSS vulnerability.</description>
    </item>
    
    <item>
      <title>Remote Code Execution - CVE-2012-1823</title>
      <link>/docs/alerts/20018/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/20018/</guid>
      <description>Type: Active Scan Risk: High Description Improper input handling is one of the most common weaknesses identified across applications today. Poorly handled input is a leading cause behind critical vulnerabilities that exist in systems and applications.
Generally, the term input handing is used to describe functions like validation, sanitization, filtering, encoding and/or decoding of input data. Applications receive input from various sources including human users, software agents (browsers), and network/peripheral devices to name a few.</description>
    </item>
    
    <item>
      <title>Remote Code Execution - Shell Shock</title>
      <link>/docs/alerts/10048/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10048/</guid>
      <description>Type: Active Scan Risk: High Description The server is running a version of the Bash shell that allows remote attackers to execute arbitrary code
Solution Update Bash on the server to the latest version
References  http://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-6271 http://www.troyhunt.com/2014/09/everything-you-need-to-know-about.html  CWE: 78 WASC: 31 Code  org/zaproxy/zap/extension/ascanrulesBeta/ShellShockScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Remote File Inclusion</title>
      <link>/docs/alerts/7/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/7/</guid>
      <description>Type: Active Scan Risk: High Description Remote File Include (RFI) is an attack technique used to exploit &amp;ldquo;dynamic file include&amp;rdquo; mechanisms in web applications. When web applications take user input (URL, parameter value, etc.) and pass them into file include commands, the web application might be tricked into including remote files with malicious code.
Almost all web application frameworks support file inclusion. File inclusion is mainly used for packaging common code into separate files that are later referenced by main application modules.</description>
    </item>
    
    <item>
      <title>Remote OS Command Injection</title>
      <link>/docs/alerts/90020/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/90020/</guid>
      <description>Type: Active Scan Risk: High Description Attack technique used for unauthorized execution of operating system commands. This attack is possible when an application accepts untrusted input to build operating system commands in an insecure manner involving improper data sanitization, and/or improper calling of external programs.
Solution If at all possible, use library calls rather than external processes to recreate the desired functionality.
Run your code in a &amp;ldquo;jail&amp;rdquo; or similar sandbox environment that enforces strict boundaries between the process and the operating system.</description>
    </item>
    
    <item>
      <title>Retrieved from Cache</title>
      <link>/docs/alerts/10050/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10050/</guid>
      <description>Type: Passive Scan Description The content was retrieved from a shared cache. If the response data is sensitive, personal or user-specific, this may result in sensitive information being leaked. In some cases, this may even result in a user gaining complete control of the session of another user, depending on the configuration of the caching components in use in their environment. This is primarily an issue where caching servers such as &amp;ldquo;proxy&amp;rdquo; caches are configured on the local network.</description>
    </item>
    
    <item>
      <title>Reverse Tabnabbing</title>
      <link>/docs/alerts/10108/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10108/</guid>
      <description>Type: Passive Scan Description At least one link on this page is vulnerable to Reverse tabnabbing as it uses a target attribute without using both of the &amp;ldquo;noopener&amp;rdquo; and &amp;ldquo;noreferrer&amp;rdquo; keywords in the &amp;ldquo;rel&amp;rdquo; attribute, which allows the target page to take control of this page.
Solution Do not use a target attribute, or if you have to then also add the attribute: rel=&amp;quot;noopener noreferrer&amp;rdquo;.
References  https://www.owasp.org/index.php/Reverse_Tabnabbing https://dev.to/ben/the-targetblank-vulnerability-by-example https://mathiasbynens.github.io/rel-noopener/ https://medium.</description>
    </item>
    
    <item>
      <title>Secure Pages Include Mixed Content</title>
      <link>/docs/alerts/10040/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10040/</guid>
      <description>Type: Passive Scan Description The page includes mixed content, that is content accessed via HTTP instead of HTTPS.
Solution A page that is available over SSL/TLS must be comprised completely of content which is transmitted over SSL/TLS. The page must not contain any content that is transmitted over unencrypted HTTP. This includes content from third party sites.
References  https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet  Code  org/zaproxy/zap/extension/pscanrules/MixedContentScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Server Leaks Information via &#39;X-Powered-By&#39; HTTP Response Header Field(s)</title>
      <link>/docs/alerts/10037/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10037/</guid>
      <description>Type: Passive Scan Description The web/application server is leaking information via one or more &amp;ldquo;X-Powered-By&amp;rdquo; HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
Solution Ensure that your web server, application server, load balancer, etc. is configured to suppress &amp;ldquo;X-Powered-By&amp;rdquo; headers.
References  http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html  Code  org/zaproxy/zap/extension/pscanrules/XPoweredByHeaderInfoLeakScanner.java  Last updated: 2020-04-30 09:48:11.</description>
    </item>
    
    <item>
      <title>Server Side Code Injection</title>
      <link>/docs/alerts/90019/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/90019/</guid>
      <description>Type: Active Scan Risk: High Description A code injection may be possible including custom code that will be evaluated by the scripting engine
Solution Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side and escape all data received from the client. Avoid the use of eval() functions combined with user input data.
References  http://cwe.</description>
    </item>
    
    <item>
      <title>Server Side Include</title>
      <link>/docs/alerts/40009/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40009/</guid>
      <description>Type: Active Scan Risk: High Description Certain parameters may cause Server Side Include commands to be executed. This may allow database connection or arbitrary code to be executed.
Solution Do not trust client side input and enforce a tight check in the server side. Disable server side includes.
References  http://www.carleton.ca/~dmcfet/html/ssi.html  CWE: 97 WASC: 31 Code  org/zaproxy/zap/extension/ascanrules/TestServerSideInclude.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Session Fixation</title>
      <link>/docs/alerts/40013/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40013/</guid>
      <description>Type: Active Scan Risk: High Description Session Fixation may be possible. If this issue occurs with a login URL (where the user authenticates themselves to the application), then the URL may be given by an attacker, along with a fixed session id, to a victim, in order to later assume the identity of the victim using the given session id. If the issue occurs with a non-login page, the URL and fixed session id may only be used by an attacker to track an unauthenticated user&#39;s actions.</description>
    </item>
    
    <item>
      <title>Session ID in URL Rewrite</title>
      <link>/docs/alerts/3/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/3/</guid>
      <description>Type: Passive Scan Description URL rewrite is used to track user session ID. The session ID may be disclosed via cross-site referer header. In addition, the session ID might be stored in browser history or server logs.
Solution For secure content, put session ID in a cookie. To be even more secure consider using a combination of cookie and URL rewrite.
References  http://seclists.org/lists/webappsec/2002/Oct-Dec/0111.html  Code  org/zaproxy/zap/extension/pscanrules/TestInfoSessionIdURL.java  Last updated: 2020-04-30 09:48:11.</description>
    </item>
    
    <item>
      <title>Source Code Disclosure</title>
      <link>/docs/alerts/10099/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10099/</guid>
      <description>Type: Passive Scan Description Application Source Code was disclosed by the web server
Solution Ensure that application Source Code is not available with alternative extensions, and ensure that source code is not present within other files or data deployed to the web server, or served by the web server.
References  http://blogs.wsj.com/cio/2013/10/08/adobe-source-code-leak-is-bad-news-for-u-s-government/  Code  org/zaproxy/zap/extension/pscanrulesAlpha/SourceCodeDisclosureScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Source Code Disclosure - /WEB-INF folder</title>
      <link>/docs/alerts/10045/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10045/</guid>
      <description>Type: Active Scan Risk: High Description Predictable Resource Location is an attack technique used to uncover hidden web site content and functionality. By making educated guesses via brute forcing an attacker can guess file and directory names not intended for public viewing. Brute forcing filenames is easy because files/paths often have common naming convention and reside in standard locations. These can include temporary files, backup files, logs, administrative site sections, configuration files, demo applications, and sample files.</description>
    </item>
    
    <item>
      <title>Source Code Disclosure - CVE-2012-1823</title>
      <link>/docs/alerts/20017/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/20017/</guid>
      <description>Type: Active Scan Risk: High Description Improper input handling is one of the most common weaknesses identified across applications today. Poorly handled input is a leading cause behind critical vulnerabilities that exist in systems and applications.
Generally, the term input handing is used to describe functions like validation, sanitization, filtering, encoding and/or decoding of input data. Applications receive input from various sources including human users, software agents (browsers), and network/peripheral devices to name a few.</description>
    </item>
    
    <item>
      <title>Source Code Disclosure - File Inclusion</title>
      <link>/docs/alerts/43/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/43/</guid>
      <description>Type: Active Scan Risk: High Description The Path Traversal attack technique allows an attacker access to files, directories, and commands that potentially reside outside the web document root directory. An attacker may manipulate a URL in such a way that the web site will execute or reveal the contents of arbitrary files anywhere on the web server. Any device that exposes an HTTP-based interface is potentially vulnerable to Path Traversal.</description>
    </item>
    
    <item>
      <title>Source Code Disclosure - Git </title>
      <link>/docs/alerts/41/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/41/</guid>
      <description>Type: Active Scan Risk: High Description The source code for the current page was disclosed by the web server
Solution Ensure that Git metadata files are not deployed to the web server or application server
References  http://projects.webappsec.org/Predictable-Resource-Location http://cwe.mitre.org/data/definitions/425.html  CWE: 541 WASC: 34 Code  org/zaproxy/zap/extension/ascanrulesBeta/SourceCodeDisclosureGit.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Source Code Disclosure - SVN</title>
      <link>/docs/alerts/42/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/42/</guid>
      <description>Type: Active Scan Risk: Medium Description The source code for the current page was disclosed by the web server
Solution Ensure that SVN metadata files are not deployed to the web server or application server
References  http://projects.webappsec.org/Predictable-Resource-Location http://cwe.mitre.org/data/definitions/425.html  CWE: 541 WASC: 34 Code  org/zaproxy/zap/extension/ascanrulesBeta/SourceCodeDisclosureSVN.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>SQL Injection</title>
      <link>/docs/alerts/40018/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40018/</guid>
      <description>Type: Active Scan Risk: High Description SQL injection may be possible.
Solution Do not trust client side input, even if there is client side validation in place.
In general, type check all data on the server side. If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by &amp;lsquo;?&amp;rsquo; If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used, use them.</description>
    </item>
    
    <item>
      <title>SQL Injection - Hypersonic SQL</title>
      <link>/docs/alerts/40020/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40020/</guid>
      <description>Type: Active Scan Risk: High Description SQL injection may be possible
Solution Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by &amp;lsquo;?&amp;rsquo; If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used, use them.</description>
    </item>
    
    <item>
      <title>SQL Injection - MsSQL</title>
      <link>/docs/alerts/40027/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40027/</guid>
      <description>Type: Active Scan Risk: High Description SQL injection may be possible
Solution Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by &amp;lsquo;?&amp;rsquo; If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used, use them.</description>
    </item>
    
    <item>
      <title>SQL Injection - MySQL</title>
      <link>/docs/alerts/40019/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40019/</guid>
      <description>Type: Active Scan Risk: High Description SQL injection may be possible
Solution Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by &amp;lsquo;?&amp;rsquo; If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used, use them.</description>
    </item>
    
    <item>
      <title>SQL Injection - Oracle</title>
      <link>/docs/alerts/40021/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40021/</guid>
      <description>Type: Active Scan Risk: High Description SQL injection may be possible
Solution Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by &amp;lsquo;?&amp;rsquo; If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used, use them.</description>
    </item>
    
    <item>
      <title>SQL Injection - PostgreSQL</title>
      <link>/docs/alerts/40022/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40022/</guid>
      <description>Type: Active Scan Risk: High Description SQL injection may be possible
Solution Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by &amp;lsquo;?&amp;rsquo; If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used, use them.</description>
    </item>
    
    <item>
      <title>SQL Injection - SQLite</title>
      <link>/docs/alerts/40024/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40024/</guid>
      <description>Type: Active Scan Risk: High Description SQL injection may be possible
Solution Do not trust client side input, even if there is client side validation in place. In general, type check all data on the server side. If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by &amp;lsquo;?&amp;rsquo; If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries. If database Stored Procedures can be used, use them.</description>
    </item>
    
    <item>
      <title>Strict-Transport-Security Header Scanner</title>
      <link>/docs/alerts/10035/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10035/</guid>
      <description>Type: Passive Scan Description HTTP Strict Transport Security (HSTS) is a web security policy mechanism whereby a web server declares that complying user agents (such as a web browser) are to interact with it using only secure HTTPS connections (i.e. HTTP layered over TLS/SSL). HSTS is an IETF standards track protocol and is specified in RFC 6797.
Solution Ensure that your web server, application server, load balancer, etc. is configured to enforce Strict-Transport-Security.</description>
    </item>
    
    <item>
      <title>Sub Resource Integrity Attribute Missing</title>
      <link>/docs/alerts/90003/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/90003/</guid>
      <description>Type: Passive Scan Description The integrity attribute is missing on a script or link tag served by an external server. The integrity tag prevents an attacker who have gained access to this server from injecting a malicious content.
Solution Provide a valid integrity attribute to the tag.
References  https://developer.mozilla.org/en/docs/Web/Security/Subresource_Integrity  Code  org/zaproxy/zap/extension/pscanrulesAlpha/SubResourceIntegrityAttributeScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Timestamp Disclosure</title>
      <link>/docs/alerts/10096/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10096/</guid>
      <description>Type: Passive Scan Description A timestamp was disclosed by the application/web server
Solution Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.
References  https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure http://projects.webappsec.org/w/page/13246936/Information%20Leakage  Code  org/zaproxy/zap/extension/pscanrules/TimestampDisclosureScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Trace.axd Information Leak</title>
      <link>/docs/alerts/40029/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/40029/</guid>
      <description>Deprecated: 2020-02-11 No longer widely supported by browsers.
Type: Active Scan Risk: Medium Description The ASP.NET Trace Viewer (trace.axd) was found to be available. This component can leak a significant amount of valuable information.
Solution Consider whether or not Trace Viewer is actually required in production, if it isn&#39;t then disable it. If it is then ensure access to it requires authentication and authorization.
References  https://msdn.microsoft.com/en-us/library/bb386420.aspx https://msdn.microsoft.com/en-us/library/wwh16c6c.aspx https://www.dotnetperls.com/trace  CWE: 215 WASC: 13 Code  org/zaproxy/zap/extension/ascanrulesBeta/TraceAxdScanner.</description>
    </item>
    
    <item>
      <title>Use of SAML</title>
      <link>/docs/alerts/10070/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10070/</guid>
      <description>Type: Passive Scan Description Unavailable
Solution Unavailable
Code  org/zaproxy/zap/extension/saml/SAMLPassiveScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>User Agent Fuzzer</title>
      <link>/docs/alerts/10104/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10104/</guid>
      <description>Type: Active Scan Risk: Informational Description Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.
Solution References  https://www.owasp.org/index.php/Web_Application_Security_Testing_Cheat_Sheet  CWE: 0 WASC: 0 Code  org/zaproxy/zap/extension/ascanrulesBeta/TestUserAgent.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>User Controllable Charset</title>
      <link>/docs/alerts/10030/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10030/</guid>
      <description>Type: Passive Scan Description This check looks at user-supplied input in query string parameters and POST data to identify where Content-Type or meta tag charset declarations might be user-controlled. Such charset declarations should always be declared by the application. If an attacker can control the response charset, they could manipulate the HTML to perform XSS or other attacks. For example, an attacker controlling the element charset value is able to declare UTF-7 and is also able to include enough user-controlled payload early in the HTML document to have it interpreted as UTF-7.</description>
    </item>
    
    <item>
      <title>User Controllable HTML Element Attribute (Potential XSS)</title>
      <link>/docs/alerts/10031/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10031/</guid>
      <description>Type: Passive Scan Description This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
Solution Validate all input and sanitize output it before writing to any HTML attributes.
References  http://websecuritytool.codeplex.com/wikipage?title=Checks#user-controlled-html-attribute  Code  org/zaproxy/zap/extension/pscanrulesBeta/UserControlledHTMLAttributesScanner.java  Last updated: 2020-04-30 09:48:11.</description>
    </item>
    
    <item>
      <title>User Controllable JavaScript Event (XSS)</title>
      <link>/docs/alerts/10043/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10043/</guid>
      <description>Type: Passive Scan Description This check looks at user-supplied input in query string parameters and POST data to identify where certain HTML attribute values might be controlled. This provides hot-spot detection for XSS (cross-site scripting) that will require further review by a security analyst to determine exploitability.
Solution Validate all input and sanitize output it before writing to any Javascript on* events.
References  http://websecuritytool.codeplex.com/wikipage?title=Checks#user-javascript-event  Code  org/zaproxy/zap/extension/pscanrulesBeta/UserControlledJavascriptEventScanner.java  Last updated: 2020-04-30 09:48:11.</description>
    </item>
    
    <item>
      <title>Username Hash Found</title>
      <link>/docs/alerts/10057/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10057/</guid>
      <description>Type: Passive Scan Description A hash of a username ({0}) was found in the response. This may indicate that the application is subject to an Insecure Direct Object Reference (IDOR) vulnerability. Manual testing will be required to see if this discovery can be abused.
Solution Use per user or session indirect object references (create a temporary mapping at time of use). Or, ensure that each use of a direct object reference is tied to an authorization check to ensure the user is authorized for the requested object.</description>
    </item>
    
    <item>
      <title>Viewstate Scanner</title>
      <link>/docs/alerts/10032/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10032/</guid>
      <description>Type: Passive Scan Description Unavailable
Solution Verify the provided information isn&#39;t confidential.
Code  org/zaproxy/zap/extension/pscanrules/ViewstateScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Weak Authentication Method</title>
      <link>/docs/alerts/10105/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10105/</guid>
      <description>Type: Passive Scan Description HTTP basic or digest authentication has been used over an unsecured connection. The credentials can be read and then reused by someone with access to the network.
Solution Protect the connection using HTTPS or use a stronger authentication mechanism
Code  org/zaproxy/zap/extension/pscanrules/InsecureAuthenticationScan.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>Web Browser XSS Protection Not Enabled</title>
      <link>/docs/alerts/10016/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10016/</guid>
      <description>Deprecated: 2020-02-11 No longer widely supported by browsers.
Type: Passive Scan Description Web Browser XSS Protection is not enabled, or is disabled by the configuration of the &amp;lsquo;X-XSS-Protection&amp;rsquo; HTTP response header on the web server
Solution Ensure that the web browser&#39;s XSS filter is enabled, by setting the X-XSS-Protection HTTP response header to &amp;lsquo;1&amp;rsquo;.
References  https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet https://www.veracode.com/blog/2014/03/guidelines-for-setting-security-headers/  Code  org/zaproxy/zap/extension/pscanrules/HeaderXssProtectionScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>X-AspNet-Version Response Header Scanner</title>
      <link>/docs/alerts/10061/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10061/</guid>
      <description>Type: Passive Scan Description Server leaks information via &amp;ldquo;X-AspNet-Version&amp;rdquo;/&amp;ldquo;X-AspNetMvc-Version&amp;rdquo; HTTP response header field(s).
Solution Configure the server so it will not return those headers.
References  https://www.troyhunt.com/shhh-dont-let-your-response-headers/ https://blogs.msdn.microsoft.com/varunm/2013/04/23/remove-unwanted-http-response-headers/  Code  org/zaproxy/zap/extension/pscanrules/XAspNetVersionScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>X-Backend-Server Header Information Leak</title>
      <link>/docs/alerts/10039/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10039/</guid>
      <description>Type: Passive Scan Description The server is leaking information pertaining to backend systems (such as hostnames or IP addresses). Armed with this information an attacker may be able to attack other systems or more directly/efficiently attack those systems.
Solution Ensure that your web server, application server, load balancer, etc. is configured to suppress X-Backend-Server headers.
Code  org/zaproxy/zap/extension/pscanrulesBeta/XBackendServerInformationLeak.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>X-ChromeLogger-Data (XCOLD) Header Information Leak</title>
      <link>/docs/alerts/10052/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10052/</guid>
      <description>Type: Passive Scan Description The server is leaking information through the X-ChromeLogger-Data (or X-ChromePhp-Data) response header. The content of such headers can be customized by the developer, however it is not uncommon to find: server file system locations, vhost declarations, etc.
Solution Disable this functionality in Production when it might leak information that could be leveraged by an attacker. Alternatively ensure that use of the functionality is tied to a strong authorization check and only available to administrators or support personnel for troubleshooting purposes not general users.</description>
    </item>
    
    <item>
      <title>X-Content-Type-Options Header Missing</title>
      <link>/docs/alerts/10021/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10021/</guid>
      <description>Type: Passive Scan Description The Anti-MIME-Sniffing header X-Content-Type-Options was not set to &amp;lsquo;nosniff&amp;rsquo;. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.</description>
    </item>
    
    <item>
      <title>X-Debug-Token Information Leak</title>
      <link>/docs/alerts/10056/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10056/</guid>
      <description>Type: Passive Scan Description The response contained an X-Debug-Token or X-Debug-Token-Link header. This indicates that Symfony&#39;s Profiler may be in use and exposing sensitive data.
Solution Limit access to Symfony&#39;s Profiler, either via authentication/authorization or limiting inclusion of the header to specific clients (by IP, etc.).
References  https://symfony.com/doc/current/cookbook/profiler/profiling_data.html https://symfony.com/blog/new-in-symfony-2-4-quicker-access-to-the-profiler-when-working-on-an-api  Code  org/zaproxy/zap/extension/pscanrules/XDebugTokenScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>X-Frame-Options Header Scanner</title>
      <link>/docs/alerts/10020/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/10020/</guid>
      <description>Type: Passive Scan Description Unavailable
Solution Unavailable
Code  org/zaproxy/zap/extension/pscanrules/XFrameOptionScanner.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
    <item>
      <title>XML External Entity Attack</title>
      <link>/docs/alerts/90023/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/90023/</guid>
      <description>Type: Active Scan Risk: High Description This technique takes advantage of a feature of XML to build documents dynamically at the time of processing. An XML message can either provide data explicitly or by pointing to an URI where the data exists. In the attack technique, external entities may replace the entity value with malicious data, alternate referrals or may compromise the security of the data the server/XML application has access to.</description>
    </item>
    
    <item>
      <title>XPath Injection</title>
      <link>/docs/alerts/90021/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/90021/</guid>
      <description>Type: Active Scan Risk: High Description XPath Injection is an attack technique used to exploit applications that construct XPath (XML Path Language) queries from user-supplied input to query or navigate XML documents. It can be used directly by an application to query an XML document, as part of a larger operation such as applying an XSLT transformation to an XML document, or applying an XQuery to an XML document. The syntax of XPath bears some resemblance to an SQL query, and indeed, it is possible to form SQL-like queries on an XML document using XPath.</description>
    </item>
    
    <item>
      <title>XSLT Injection</title>
      <link>/docs/alerts/90017/</link>
      <pubDate>Thu, 30 Apr 2020 09:48:11 +0000</pubDate>
      
      <guid>/docs/alerts/90017/</guid>
      <description>Type: Active Scan Risk: Medium Description Injection using XSL transformations may be possible, and may allow an attacker to read system information, read and write files, and/or execute arbitrary code.
Solution Sanitize and analyze every user input coming from any client-side.
References  https://www.contextis.com/blog/xslt-server-side-injection-attacks  CWE: 91 WASC: 23 Code  org/zaproxy/zap/extension/ascanrulesAlpha/XSLTInjection.java  Last updated: 2020-04-30 09:48:11.442Z </description>
    </item>
    
  </channel>
</rss>